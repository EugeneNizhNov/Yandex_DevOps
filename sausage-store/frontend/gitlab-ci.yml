variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

cache:
  paths:
    - .npm/ # для хранения зависимостей сборки фронтенда 

stages:          # List of stages for jobs, and their order of execution
  - build
  - notify
  - release
  - deploy
  - test

include:
  - template: Security/SAST.gitlab-ci.yml

build-frontend-code-job:
  stage: build  
  only:
    changes:
    - frontend/**/*
  script:        
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend  

sonarqube-frontend-sast-job:
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY_FRONT -Dsonar.sources=$SONAR_SOURCES -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONAR_LOGIN_FRONT

upload-frontend-release:
  stage: release
  only:
    changes:
    - frontend/**/*
  needs:
   - build-frontend-code-job
  script:
    - cd frontend/dist
    - tar cvzf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file sausage-store-${VERSION}.tar.gz
      ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz 


frontend-deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan -H ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./frontend/frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/frontend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}";setsid /bin/bash -s " < ./frontend/deploy.sh
  environment:
    name: staging
    url: http://std-037-51.praktikum-services.tech/


build-frontend-kaniko-docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "Building Frontend..."
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true


release-frontend-crane-docker:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Releasing Frontend..."
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $VERSION


deploy-frontend-docker:
  stage: deploy
  image: alpine:3.18
  before_script:
    - echo "Deploying Frontend..."
    - apk add openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy_docker.sh и выполним его на целевом хосте, где развернем сосисочный фронта 
  script: 
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p ~/tmp${CI_PROJECT_DIR}/frontend/"
    - scp ./frontend/default.conf ${DEV_USER}@${DEV_HOST}:~/tmp${CI_PROJECT_DIR}/frontend/default.conf
    - envsubst < ./frontend/deploy_docker.sh|ssh ${DEV_USER}@${DEV_HOST}



telegram-notification-frontend:
  stage: notify
  when: manual
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
    - changes:
      - frontend/**/*
  script:
    - ARTIFACT_URL="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job"
    - curl -X POST -d "chat_id=-1002330308760&text=Сборка frontend std-037-51 завершена, артефакт доступен по ссылке $ARTIFACT_URL" "https://api.telegram.org/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/sendMessage"
  