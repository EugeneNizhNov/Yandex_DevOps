variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90   # для того, чтобы Maven не съел всю свободную оперативку


cache:
    key: maven-cache
    paths: 
      - ${CI_PROJECT_DIR}/.m2/repository

stages:          # List of stages for jobs, and their order of execution
  - build
  - notify
  - release
  - deploy
  - test

include:
  - template: Security/SAST.gitlab-ci.yml

build-backend-code-job:
  stage: build
  variables: 
    SPRING_FLYWAY_ENABLED: false
  script:
    - cd backend
    - >
      mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
      -Dversion.application=${VERSION}
      -Dmaven.test.skip=true
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/

  rules:
    - changes:
        - backend/**

    
semgrep-sast:
  stage: test
  needs: ["build-backend-code-job"]
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  

sonarqube-backend-sast-job:
  stage: test
  when: manual
  image: maven:3.8-openjdk-16
  variables: 
    SPRING_FLYWAY_ENABLED: false
  script:
    - cd backend
    - mvn verify sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONAR_LOGIN_BACK -Dsonar.projectName=$SONAR_PROJECT_NAME_BACK -Dsonar.qualitygate.wait=true


upload-backend-release:
  stage: release
  only:
    changes:
      - backend/**/*
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - >
      mvn deploy -DskipTests
      -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
      -s settings.xml -Dversion.application=${VERSION} 

backend-deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan -H ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
  environment:
    name: staging
    url: http://std-037-51.praktikum-services.tech/


build-backend-kaniko-docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true


release-backend-crane-docker:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION


deploy-backend-docker:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy_docker.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд 
  script:   
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p ~/tmp${CI_PROJECT_DIR}/frontend/"
    - envsubst < ./backend/deploy_docker.sh|ssh ${DEV_USER}@${DEV_HOST}

telegram-notification-backend:
  stage: notify
  when: manual
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
    - changes:
      - backend/**/*
  script:
    - ARTIFACT_URL="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job"
    - curl -X POST -d "chat_id=-1002330308760&text=Сборка backend std-037-51 завершена, артефакт доступен по ссылке $ARTIFACT_URL" "https://api.telegram.org/XXXXXXXXXXXXXXXXXXXXXXXXXXXX/sendMessage"
 

